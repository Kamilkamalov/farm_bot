from os import link
from pickle import NONE
from tkinter.tix import TEXT
from xml.dom.minidom import Element

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiohttp import Payload
import keyboards as nav
from random import randint
import logging

import sqlite3

import asyncio # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–∫–∞ –¥–ª—è –ø–æ–∑–¥–Ω–∏—Ö –ª–æ–≥–æ–≤

from config import TOKEN

# —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞
from aiogram.utils.deep_linking import get_start_link, decode_payload
from aiogram import types

# —Å—á–µ—Ç—á–∏–∫
from collections import Counter

import time

# –¥–ª—è —à—Ä–∏—Ñ—Ç–∞
from aiogram import types
from aiogram.utils.markdown import link

import os.path # –ø—ã—Ç–∞—é—Å—å —É–∫–∞–∑–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏



# –ü–∏—à—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≥–¥–µ –º–æ–∏ –µ–±–∞–Ω—ã–µ –æ—à–∏–±–∫–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


#base = sqlite3.connect('data.db') # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
#cur = conn.cursor('') # cur –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–¥
#cur.execute('CREATE TABLE users(user_id INTEGER, username TEXT)') # –¥–æ–±–∞–≤–∏–ª —Å—Ç—Ä–æ–∫—É
def sql_start():
    global base, cur
    base = sqlite3.connect('data.db')
    cur = base.cursor()
    if base:
        print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
        # –≠—Ç–∏ –∞–ª—å—Ç–µ—Ä—ã –Ω–µ –¥–∞—é—Ç —é–∑–∞—Ç—å –±–¥ –Ω–∞ vds
        # cur.execute("alter table users add column 'Last_Name' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Link' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Active' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_ATH' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Farm_group' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Sostav' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Description' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Farm_deystv' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Farmakodinamika' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Farmakokinetika' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Pokazaniya' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Protiv' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_lact' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Bad' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Interaction' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Sposob' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Peredoz' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Osob_ukaz' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Forma_vipuska' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Proizvoditel' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Recept' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Save' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
        # cur.execute("alter table users add column 'Last_Srok' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞ –±–∞–≥–∞

    else:
        print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    base.execute('CREATE TABLE IF NOT EXISTS users(user_id INTEGER PRIMARY KEY NOT NULL, link, ref_manager, referals, name, Last_Name, Last_Active, Last_ATH, Last_Farm_group, Last_Sostav, Last_Description, Last_Farm_deystv, Last_Farmakodinamika, Last_Farmakokinetika, Last_Pokazaniya, Last_Protiv, Last_lact, Last_Bad, Last_Interaction, Last_Sposob, Last_Peredoz, Last_Osob_ukaz, Last_Forma_vipuska, Last_Proizvoditel, Last_Recept, Last_Save, Last_Srok, Last_Link, Counter)')
    base.commit()
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
db_path = os.path.join(BASE_DIR, "data.db")
with sqlite3.connect(db_path) as db:
    sql_start() # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ë–î

def farmdata_start():
    global base_farm, cur_farm
    base_farm = sqlite3.connect('farmdata.db')
    cur_farm = base_farm.cursor()
    if base_farm:
        print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        #cur_farm.execute("alter table lekarstva add column 'Sposob' 'TEXT INTEGER'") # + –∫–æ–ª–æ–Ω–∫–∞ –°–ø–æ—Å–æ–±
    else:
        print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –ª–∏–±–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ –∫ –Ω–µ–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è')
    base_farm.execute('CREATE TABLE IF NOT EXISTS lekarstva(Remedy_id INTEGER PRIMARY KEY NOT NULL, Name_lp TEXT INTEGER, Active TEXT INTEGER, ATH TEXT INTEGER, Farm_group TEXT INTEGER, Sostav TEXT INTEGER, Description TEXT INTEGER, Farm_deystv TEXT INTEGER, Farmakodinamika TEXT INTEGER, Farmakokinetika TEXT INTEGER, Pokazaniya TEXT INTEGER, Protiv TEXT INTEGER, Pregnancy_lact TEXT INTEGER, Bad_effects TEXT INTEGER, Interaction TEXT INTEGER, Peredoz TEXT INTEGER, Osob_ukaz TEXT INTEGER, Forma_vipuska TEXT INTEGER, Proizvoditel TEXT INTEGER, Recept TEXT INTEGER, Save TEXT INTEGER, Srok TEXT INTEGER, Link TEXT INTEGER )')
    base_farm.commit()
farmdata_start() # –∑–∞–ø—É—Å–∫–∞–º —Ñ—É–Ω–∫—Ü–∏—é —Å –±–¥ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤

# –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ lower
# cur_farm.execute('SELECT Name_lp FROM "lekarstva"')
# Name_tuple = cur_farm.fetchall()
# for Name_lp in Name_tuple:
#     Name_lp, = Name_lp
#     Element_Name_lp = Name_lp.lower()
#     cur_farm.execute('UPDATE "lekarstva" SET Name_lp = ? WHERE Name_lp = ?', (Element_Name_lp, Name_lp)) # bars @headovich thx
#     #cur_farm.execute('UPDATE "lekarstva" SET Name_lp = ?', (Element_Name_lp, ))
#     print(Element_Name_lp)
#     base_farm.commit()

# –¥–æ–±–∞–≤–ª—è—é —é–∑–µ—Ä–∞ –≤ –±–¥ –ø—Ä–∏ /start
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    
    ref_link = await get_start_link(str(message.from_user.id), encode=True) # —Å–æ–∑–¥–∞—é —Å—Å—ã–ª–∫—É
    args = message.get_args() # —Ç—É—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π id, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    reference = decode_payload(args) # —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ id
    print(ref_link)
    print(args)
    print(len(args))

    await message.reply('{user}'.format(user=message.from_user.full_name) + ", –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\nüíä–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É‚úÖ\n", reply_markup = nav.mainMenu)
    try:
        base = sqlite3.connect('data.db')
        cur = base.cursor()
        # –ù–ï–í–ï–†–ù–´–ô –°–ò–ù–¢–ê–ö–°–ò–° –ù–ï–¢ –í–û–ü–†–û–°–û–í sql cur.execute(f'INSERT INTO "users" (user_id, link) VALUES ("{message.from_user.id}", "{ref_link}")')
        cur.execute('INSERT INTO "users" (user_id, link, name) VALUES (?, ?, ?)', (message.from_user.id, ref_link, message.from_user.full_name))
        
        base.commit()
    except Exception as e1:
        print(e1)
        base = sqlite3.connect('data.db')
        cur = base.cursor()
        cur.execute('INSERT INTO "users" (user_id, link) VALUES(?, ?, ?)', (message.from_user.id, ref_link, message.from_user.full_name))
        # –¥–æ–±–∞–≤–∏–ª name 
        base.commit()    
    finally:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –≤ ref_manager
        # –ù–ï–í–ï–†–ù–´–ô –°–ò–ù–¢–ê–ö–°–ò–° –ù–ï–¢ –í–û–ü–†–û–°–û–í cur.execute(f'SELECT ref_manager FROM "users" WHERE user_id = "{message.from_user.id}"') # –≤—ã–±–∏—Ä–∞—é ref_manager –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—é –∑–Ω–∞—á–µ–Ω–∏–µ —Å NULL
        cur.execute('SELECT ref_manager FROM "users" WHERE user_id = ?', (message.from_user.id,))  # –≤—ã–±–∏—Ä–∞—é ref_manager –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—é –∑–Ω–∞—á–µ–Ω–∏–µ —Å NULL
        base.commit()
        is_ref_manager = cur.fetchone() # –≤—ã—Ç–∞—Å–∫–∏–≤–∞—é —Ä–µ—Ñ –º—ç–Ω—ç–¥–∂—ç—Ä–∞ –≤ –≤–∏–¥–µ –ª–∏—Å—Ç–∞
        clean_ref_manager = is_ref_manager[0] # –±–µ—Ä—É –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
        print(clean_ref_manager, " —Ä–µ—Ñ –º–µ–Ω–µ–¥–∂–µ—Ä")
    # –°–ß–ï–¢–ß–ò–ö
    #    i = 0
        if len(args) > 0: # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ payload —É /start –±–æ–ª—å—à–µ 0, —Ç–æ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cur.execute('SELECT ref_manager FROM "users" WHERE ref_manager')
            base.commit()
            is_all_ref_managers = cur.fetchall() # –≤—ã—Ç–∞—Å–∫–∏–≤–∞—é –≤—Å–µ—Ö —Ä–µ—Ñ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ –≤–∏–¥–µ tuple
            Counter_all_ref_managers = Counter(is_all_ref_managers) # –ø–æ–ª—É—á–∞—é —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏
            
            #print(Counter_all_ref_managers) # —Å–º–æ—Ç—Ä—é —Å–ª–æ–≤–∞—Ä—å, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤—ã—à–µ
            #How_ref_managers = len(Counter_all_ref_managers) # —Å—á–∏—Ç–∞—é —Å–∫–æ–ª—å–∫–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ
            #print(How_ref_managers, " –°–∫–æ–ª—å–∫–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ") # —Å–º–æ—Ç—Ä—é —Å–∫–æ–ª—å–∫–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ
            #Last_index = How_ref_managers - 1
            #print(Last_index, " –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å —Å–ª–æ–≤–∞—Ä—è")
            # —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–≤–∞—Ä—è –ø–æ –∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–∏–µ
            
            # –ò–ó–í–õ–ï–ö —Å –ø–æ–º–æ—â—å—é –∑–∞–ø—è—Ç–æ–π –µ–±–∞–Ω—ã–π –∫–æ—Ä—Ç–µ–∂!
            for key, value in Counter_all_ref_managers.items():
                key, = key
                print(key,':',value) # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å * –ø–µ—Ä–µ–¥ key, —Ç–æ –∫–æ—Ä—Ç–µ–∂ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç—Å—è
                # –ù–ï–í–ï–†–ù–´–ô –°–ò–ù–¢–ê–ö–°–ò–° cur.execute(f'UPDATE "users" SET referals = "{value}" WHERE user_id = "{key}"')
                cur.execute('UPDATE "users" SET referals = ? WHERE user_id = ?', (value, key))
                base.commit()
 
        if clean_ref_manager == None:
            # –ù–ï–í–ï–†–ù–´–ô –°–ò–ù–¢–ê–ö–°–ò–° cur.execute(f'UPDATE "users" SET ref_manager = "{reference}" WHERE user_id = "{message.from_user.id}"') # —É–∫–∞–∑—ã–≤–∞—é –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª 
            cur.execute('UPDATE "users" SET ref_manager = ? WHERE user_id = ?', (reference, message.from_user.id)) # —É–∫–∞–∑—ã–≤–∞—é –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
            base.commit()
        else:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω –¥—Ä—É–≥–∏–º —Ä–µ—Ñ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏–ª–∏ —É /start –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ payload(–Ω–µ—Ç —Ä–µ—Ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞)")


# —Ä–∞–±–æ—Ç–∞ –∫–Ω–æ–ø–æ–∫ —É —é–∑–µ—Ä–æ–≤

@dp.message_handler()
async def bot_message(message: types.Message):
    
    if message.text == '‚ùì–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è':
        await message.reply("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n1) –í–∏–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üéØ–ù–∞–π—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ'\n2) –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–∫–æ–º–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞\n3) –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ—è–≤–∏–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏ –≤ —á–∞—Ç–µ\n‚ùå–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è? –ù–∞–∂–º–∏—Ç–µ /start –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ \n\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥–∏—Ç–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞.\n\n–ú–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–ø—Å–æ–º –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏\n\n–ü–æ–∏—Å–∫ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É –≤–µ—â–µ—Å—Ç–≤—É –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n\n–ü–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏ –ª–∏—Å—Ç–Ω–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ –∏–ª–∏ –Ω–∏–∂–µ")
    if message.text == 'üëçüèª–ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        await message.reply("üë§–ù–∞—à–ª–∏ –±–∞–≥ –∏–ª–∏ –æ—à–∏–±–∫—É? –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ: \n@creppoq \nüë§–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —Å–≤—è–∑—è–º —Å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é, –ø—Ä–æ–≤–∏–∑–æ—Ä-—Ç–µ—Ö–Ω–æ–ª–æ–≥: \n@Son511777")
    if message.text == 'üéØ–ù–∞–π—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ':
        await message.reply('‚öôÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏')
    if message.text != '‚ùì–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è' and message.text != 'üëçüèª–ü–æ–¥–¥–µ—Ä–∂–∫–∞' and message.text != 'üéØ–ù–∞–π—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ':
        await message.reply(f"üíä–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É:", reply_markup=nav.inline_btn_ez_info)
#        await bot.send_message(message.chat.id, '---------------------------')
        await message.reply(f"ü§ì–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:", reply_markup=nav.inline_btn_hard_info)

# –∑–∞–ø—Ä–æ—Å –Ω–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –≤ –±–¥
        message.text = message.text.lower()
        Name_for_user = message.text # —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Name = ? WHERE user_id = ?', (Name_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞
        base.commit() # —Ä–µ—à–∞–µ—Ç 

        cur_farm.execute('SELECT Name_lp FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,)) #  –ë–∞–≥ —Å –æ—Ç–∫–∞–∑–æ–º
        Name_lp = cur_farm.fetchone()
        Warn_msg = "–í–ù–ò–ú–ê–ù–ò–ï‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è \n–í—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –∏–ª–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.\n–ò–ù–§–û–†–ú–ê–¶–ò–Ø –í –ö–ù–û–ü–ö–ê–• –í–´–®–ï –ù–ï –û–ë–ù–û–í–ò–õ–ê–°–¨‚ùóÔ∏è\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑..."
        if Name_lp is None: # –∏–∑–≤–ª–µ–∫ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ—Ç—É –Ω–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—É—é?
            await message.reply(f'–í–ù–ò–ú–ê–ù–ò–ï‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è \n–í—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –∏–ª–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.\n–ò–ù–§–û–†–ú–ê–¶–ò–Ø –í –ö–ù–û–ü–ö–ê–• –í–´–®–ï –ù–ï –û–ë–ù–û–í–ò–õ–ê–°–¨‚ùóÔ∏è\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...')
            cur.execute('UPDATE "users" SET Last_Name = ? WHERE user_id = ?', (Warn_msg, message.from_user.id))
        base.commit() # —Ä–µ—à–∞–µ—Ç

        cur_farm.execute('SELECT Active FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Active, = cur_farm.fetchone()
        Active_for_user = Active #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Active = ? WHERE user_id = ?', (Active_for_user, message.from_user.id))

# –°—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å–ª–æ–≤–∞ —Ä—É–∫–∞–º–∏
        cur.execute('SELECT Counter FROM "users" WHERE user_id = ?', (message.from_user.id,))
        Counter, = cur.fetchone() # –∏–∑–≤–ª–µ–∫–∞—é –∫–æ–ª-–≤–æ –Ω–∞–∂–∞—Ç–∏–π?
        Counter_for_user = Counter
        if Counter_for_user is None: # –µ—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            Counter_for_user = 0
            cur.execute('UPDATE "users" SET Counter = ? WHERE user_id = ?', (Counter_for_user, message.from_user.id)) # –∫–ª–∞–¥—É –Ω–æ–ª–∏–∫
        else: 
            Counter_for_user += 1 
            cur.execute('UPDATE "users" SET Counter = ? WHERE user_id = ?', (Counter_for_user, message.from_user.id))


        cur_farm.execute('SELECT ATH FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        ATH, = cur_farm.fetchone()
        ATH_for_user = ATH #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_ATH = ? WHERE user_id = ?', (ATH_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞

        cur_farm.execute('SELECT Farm_group FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Farm_group, = cur_farm.fetchone()
        Farm_group_for_user = Farm_group #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Farm_group = ? WHERE user_id = ?', (Farm_group_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞

        cur_farm.execute('SELECT Sostav FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Sostav, = cur_farm.fetchone()
        Sostav_for_user = Sostav #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Sostav = ? WHERE user_id = ?', (Sostav_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞

        cur_farm.execute('SELECT Description FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Description, = cur_farm.fetchone()
        Description_for_user = Description #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Description = ? WHERE user_id = ?', (Description_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞

        cur_farm.execute('SELECT Farm_deystv FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Farm_deystv, = cur_farm.fetchone()
        Farm_deystv_for_user = Farm_deystv #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Farm_deystv = ? WHERE user_id = ?', (Farm_deystv_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞

        cur_farm.execute('SELECT Farmakodinamika FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Farmakodinamika, = cur_farm.fetchone()
        Farmakodinamika_for_user = Farmakodinamika #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Farmakodinamika = ? WHERE user_id = ?', (Farmakodinamika_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞
        
        cur_farm.execute('SELECT Farmakokinetika FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Farmakokinetika, = cur_farm.fetchone()
        Farmakokinetika_for_user = Farmakokinetika #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Farmakokinetika = ? WHERE user_id = ?', (Farmakokinetika_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞

        cur_farm.execute('SELECT Pokazaniya FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Pokazaniya, = cur_farm.fetchone()
        Pokazaniya_for_user = Pokazaniya #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Pokazaniya = ? WHERE user_id = ?', (Pokazaniya_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞

        cur_farm.execute('SELECT Protiv FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Protiv, = cur_farm.fetchone()
        Protiv_for_user = Protiv #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Protiv = ? WHERE user_id = ?', (Protiv_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞

        cur_farm.execute('SELECT Pregnancy_lact FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Pregnancy_lact, = cur_farm.fetchone()
        Pregnancy_lact_for_user = Pregnancy_lact #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_lact = ? WHERE user_id = ?', (Pregnancy_lact_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞

        cur_farm.execute('SELECT Bad_effects FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Bad_effects, = cur_farm.fetchone()
        Bad_effects_for_user = Bad_effects #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Bad = ? WHERE user_id = ?', (Bad_effects_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞

        cur_farm.execute('SELECT Interaction FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Interaction, = cur_farm.fetchone()
        Interaction_for_user = Interaction #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Interaction = ? WHERE user_id = ?', (Interaction_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞

        cur_farm.execute('SELECT Sposob FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Sposob, = cur_farm.fetchone()
        Sposob_for_user = Sposob #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Sposob = ? WHERE user_id = ?', (Sposob_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞

        cur_farm.execute('SELECT Peredoz FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Peredoz, = cur_farm.fetchone()
        Peredoz_for_user = Peredoz #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Peredoz = ? WHERE user_id = ?', (Peredoz_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞

        cur_farm.execute('SELECT Osob_ukaz FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Osob_ukaz, = cur_farm.fetchone()
        Osob_ukaz_for_user = Osob_ukaz #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Osob_ukaz = ? WHERE user_id = ?', (Osob_ukaz_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞

        cur_farm.execute('SELECT Forma_vipuska FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Forma_vipuska, = cur_farm.fetchone()
        Forma_vipuska_for_user = Forma_vipuska #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Forma_vipuska = ? WHERE user_id = ?', (Forma_vipuska_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞
        
        cur_farm.execute('SELECT Proizvoditel FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Proizvoditel, = cur_farm.fetchone()
        Proizvoditel_for_user = Proizvoditel #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Proizvoditel = ? WHERE user_id = ?', (Proizvoditel_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞

        cur_farm.execute('SELECT Recept FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Recept, = cur_farm.fetchone()
        Recept_for_user = Recept #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Recept = ? WHERE user_id = ?', (Recept_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞

        cur_farm.execute('SELECT Save FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Save, = cur_farm.fetchone()
        Save_for_user = Save #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Save = ? WHERE user_id = ?', (Save_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞

        cur_farm.execute('SELECT Srok FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Srok, = cur_farm.fetchone()
        Srok_for_user = Srok #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Srok = ? WHERE user_id = ?', (Srok_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞

        cur_farm.execute('SELECT Link FROM "lekarstva" WHERE Name_lp LIKE ?', (Name_for_user,))
        Link, = cur_farm.fetchone()
        Link = Link.strip() # –ø—Ä–∏—à–ª–æ—Å—å –æ–±—Ä–µ–∑–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–æ–±–µ–ª –º–µ—à–∞–µ—Ç –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é —Å—Å—ã–ª–∫–∏
        Link_for_user = Link #  —Ñ–∏–∫—Å –±–∞–≥–∞
        cur.execute('UPDATE "users" SET Last_Link = ? WHERE user_id = ?', (Link_for_user, message.from_user.id)) # —Ñ–∏–∫—Å –±–∞–≥–∞

        base.commit() # —Ä–µ—à–∞–µ—Ç 


# –†–ê–ë–û–¢–ê –ò–ù–õ–ê–ô–ù –ö–ù–û–ü–û–ö –ü–†–û –õ–ï–ö–ê–†–°–¢–í–ê
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('button'))
async def process_callback_button1(callback_query: types.CallbackQuery):
    code = callback_query.data
    # –ø–æ–ª—É—á–∞—é Last_Link
    cur.execute('SELECT Last_Link FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
    Last_Link, = cur.fetchone() # –ë–ê–ì–ò 
     # —Ñ–∏–∫—à—É –±–∞–≥
    if code == 'button1':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Name FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Name, = cur.fetchone() # –ë–ê–ì–ò 
        await bot.send_message(callback_query.from_user.id, f'{Last_Name}  \n', parse_mode = "HTML")


# –ø–æ—Ä–∞–Ω—å—à–µ –≤—Å—É–Ω—É–ª —Å—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –±–µ–∑ –≥–ª–æ–±–∞–ª–∞
    elif code == 'button22':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Link FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Link, = cur.fetchone() # –ë–ê–ì–ò 
        await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ rlsnet</a>  \n', disable_web_page_preview=True, parse_mode = "HTML")

    elif code == 'button2':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Active FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Active, = cur.fetchone() # –ë–ê–ì–ò 
        await bot.send_message(callback_query.from_user.id, f'{Last_Active}   \n', parse_mode = "HTML")

    elif code == 'button3':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_ATH FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_ATH, = cur.fetchone() # –ë–ê–ì–ò 
        if Last_ATH != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}{Last_ATH}">ATH</a>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        else:
            await bot.send_message(callback_query.from_user.id, f'<b>{Last_ATH}</b>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        
    elif code == 'button4':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Farm_group FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Farm_group, = cur.fetchone() # –ë–ê–ì–ò 
        if Last_Farm_group != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}{Last_Farm_group}">–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∞</a>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        else:
            await bot.send_message(callback_query.from_user.id, f'<b>{Last_Farm_group}</b>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        
    elif code == 'button5':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Sostav FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Sostav, = cur.fetchone() # –ë–ê–ì–ò 
        if Last_Sostav != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏": # —Ç—É—Ç –µ—â–µ —É—Ç–æ—á–Ω–∏—Ç—å
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}{Last_Sostav}">–°–æ—Å—Ç–∞–≤</a>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        else:
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}#sostav">–°–æ—Å—Ç–∞–≤</a>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        
    elif code == 'button6':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Description FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Description, = cur.fetchone() # –ë–ê–ì–ò 
        if Last_Description != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}{Last_Description}">–û–ø–∏—Å–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã</a>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        else:
            await bot.send_message(callback_query.from_user.id, f'<b>{Last_Description}</b>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        
    elif code == 'button7':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Farm_deystv FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Farm_deystv, = cur.fetchone() # –ë–ê–ì–ò 
        if Last_Farm_deystv != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}{Last_Farm_deystv}">–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ</a>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        else:
            await bot.send_message(callback_query.from_user.id, f'<b>{Last_Farm_deystv}</b>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        
    elif code == 'button8':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Farmakodinamika FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Farmakodinamika, = cur.fetchone() # –ë–ê–ì–ò 
        if Last_Farmakodinamika != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}{Last_Farmakodinamika}">–§–∞—Ä–º–∞–∫–æ–¥–∏–Ω–∞–º–∏–∫–∞</a>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        else:
            await bot.send_message(callback_query.from_user.id, f'<b>{Last_Farmakodinamika}</b>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        
    elif code == 'button9':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Farmakokinetika FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Farmakokinetika, = cur.fetchone() # –ë–ê–ì–ò 
        if Last_Farmakokinetika != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}{Last_Farmakokinetika}">–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∞</a>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        else:
            await bot.send_message(callback_query.from_user.id, f'<b>{Last_Farmakokinetika}</b>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        
    elif code == 'button10':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Pokazaniya FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Pokazaniya, = cur.fetchone() # –ë–ê–ì–ò 
        if Last_Pokazaniya != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}{Last_Pokazaniya}">–ü–æ–∫–∞–∑–∞–Ω–∏—è</a>  \n', disable_web_page_preview=True, parse_mode = "HTML") 
        else:
            await bot.send_message(callback_query.from_user.id, f'<b>{Last_Pokazaniya}</b>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        
    elif code == 'button11':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Protiv FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Protiv, = cur.fetchone() # –ë–ê–ì–ò 
        if Last_Protiv != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}{Last_Protiv}">–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è</a>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        else:
            await bot.send_message(callback_query.from_user.id, f'<b>{Last_Protiv}</b>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        
    elif code == 'button12':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_lact FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_lact, = cur.fetchone() # –ë–ê–ì–ò 
        if Last_lact != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}{Last_lact}">–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –≥—Ä—É–¥—å—é</a>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        else:
            await bot.send_message(callback_query.from_user.id, f'<b>{Last_lact}</b>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        
    elif code == 'button13':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Bad FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Bad, = cur.fetchone() # –ë–ê–ì–ò 
        if Last_Bad != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}{Last_Bad}">–ü–æ–±–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</a>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        else:
            await bot.send_message(callback_query.from_user.id, f'<b>{Last_Bad}</b>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        
    elif code == 'button14':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Interaction FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Interaction, = cur.fetchone() # –ë–ê–ì–ò 
        if Last_Interaction != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}{Last_Interaction}">–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ</a>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        else:
            await bot.send_message(callback_query.from_user.id, f'<b>{Last_Interaction}</b>  \n', disable_web_page_preview=True, parse_mode = "HTML")
    
    elif code == 'button15':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Sposob FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Sposob, = cur.fetchone() # –ë–ê–ì–ò 
        if Last_Sposob != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}{Last_Sposob}">–°–ø–æ—Å–æ–± –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏ –¥–æ–∑—ã</a>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        else:
            await bot.send_message(callback_query.from_user.id, f'<b>{Last_Sposob}</b>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        
    elif code == 'button16':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Peredoz FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Peredoz, = cur.fetchone() # –ë–ê–ì–ò 
        if Last_Peredoz != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}{Last_Peredoz}">–ü–µ—Ä–µ–¥–æ–∑–∏—Ä–æ–≤–∫–∞</a>  \n', disable_web_page_preview=True, parse_mode = "HTML") 
        else:
            await bot.send_message(callback_query.from_user.id, f'<b>{Last_Peredoz}</b>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        
    elif code == 'button17':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Osob_ukaz FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Osob_ukaz, = cur.fetchone() # –ë–ê–ì–ò 
        if Last_Osob_ukaz != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}{Last_Osob_ukaz}">–û—Å–æ–±—ã–µ —É–∫–∞–∑–∞–Ω–∏—è</a>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        else:
            await bot.send_message(callback_query.from_user.id, f'<b>{Last_Osob_ukaz}</b>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        
    elif code == 'button18':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Forma_vipuska FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Forma_vipuska, = cur.fetchone() # –ë–ê–ì–ò 
        if Last_Forma_vipuska != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}{Last_Forma_vipuska}">–§–æ—Ä–º–∞ –≤—ã–ø—É—Å–∫–∞</a>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        else:
            await bot.send_message(callback_query.from_user.id, f'<b>{Last_Forma_vipuska}</b>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        
    elif code == 'button19':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Proizvoditel FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Proizvoditel, = cur.fetchone() # –ë–ê–ì–ò 
        if Last_Proizvoditel != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}{Last_Proizvoditel}">–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å</a>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        else:
            await bot.send_message(callback_query.from_user.id, f'<b>{Last_Proizvoditel}</b>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        
    elif code == 'button20':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Recept FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Recept, = cur.fetchone() # –ë–ê–ì–ò 
        if Last_Recept != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}{Last_Recept}">–£—Å–ª–æ–≤–∏—è –æ—Ç–ø—É—Å–∫–∞ –∏–∑ –∞–ø—Ç–µ–∫</a>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        else:
            await bot.send_message(callback_query.from_user.id, f'<b>{Last_Recept}</b>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        
    elif code == 'button21':
        await bot.answer_callback_query(callback_query.id)
        cur.execute('SELECT Last_Save FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # —Ä–∞–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª message.text. –ß–µ–ª –ª—É—á—à–∏–π!
        Last_Save, = cur.fetchone() # –ë–ê–ì–ò 
        if Last_Save != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            await bot.send_message(callback_query.from_user.id, f'<a href="{Last_Link}{Last_Save}">–£—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è</a>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        else:
            await bot.send_message(callback_query.from_user.id, f'<b>{Last_Save}</b>  \n', disable_web_page_preview=True, parse_mode = "HTML")
        
    

# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ 
#@dp.message_handler(commands=["ref"])
#async def get_ref(message: types.Message):
#   link = await get_start_link(str(message.from_user.username), encode=True)
#   result: 'https://t.me/MyBot?start='
#   –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ = –±—É–¥–µ—Ç –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º —é–∑–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª —Ä–µ—Ñ —Å—Å—ã–ª–∫—É, –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –∏ –µ–≥–æ id 
#   await message.answer(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ {link}")


# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å—Å—ã–ª–∫–∏
#@dp.message_handler(commands=["start"])
#async def handler(message: types.Message):
#    args = message.get_args()
#    reference = decode_payload(args)
#    await message.answer(f"–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª {reference}") #–∑–¥–µ—Å—å –≤  reference –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —é–∑–µ—Ä–Ω–µ–π–º, —Ç–æ–≥–æ –∫—Ç–æ —Å–æ–∑–¥–∞–ª —Å—Å—ã–ª–∫—É




#  –ø–æ–ª–ª–∏–Ω–≥ = –æ–ø—Ä–∞—à–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö?
if __name__ == '__main__':
    executor.start_polling(dp)